class bst:
    def __init__(self,data):
        self.key=data
        self.lchild=None
        self.rchild=None
    def insert(self,data):
        if self.key==data:
            return 
        elif self.key is None:
            self.key=data;
            return 
        elif self.key>data:
            if self.lchild:
                self.lchild.insert(data)
            else:
                self.lchild=bst(data)
        else:
            if self.rchild:
                self.rchild.insert(data)
            else:
                self.rchild=bst(data)
    def search(self,data):
        if self.key==data:
            print('present in tree')
            return
        elif self.key>data:
            if self.lchild:
               self.lchild.search(data)
            else:
                print('not found')
        else:
            if self.rchild:
                self.rchild.search(data)
            else:
                print('not found')
    def preorder(self):
        print(self.key,end=' ')
        if self.lchild:
            self.lchild.preorder()
        if self.rchild:
            self.rchild.preorder()
    def delete(self,data):
        if self.key is None:
            print('tree is empty')
            return
        if data<self.key:
            if self.lchild:
               self.lchild=self.lchild.delete(data)
            else:
                print('node not present')
        if data>self.key:
                if self.rchild:
                    self.rchild=self.rchild.delete(data)
        else:
            if self.lchild is None:
                temp=self.rchild
                self=None
                return temp
            if self.rchild is None:
                temp=self.lchild
                self=None
                return temp
            node=self.rchild
            while(node.lchild):
                node=node.lchild
            self.key=node.key
            self.rchild=self.rchild.delete(node.key)
            return self
root=bst(None)
l=[20,100,420,10,3,1]
for i in l:
    root.insert(i)
root.search(0)
root.preorder()
root.delete(10)
print()
root.preorder()

OUTPUT:

not found
20 10 3 1 100 420 
100 3 1 420 
